### Starting build.
# Target: driver/driver.ml.depends, tags: { package(angstrom), package(ppx_deriving.std), package(tyxml), extension:ml, file:driver/driver.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package angstrom -package tyxml -package ppx_deriving.std -modules driver/driver.ml > driver/driver.ml.depends # cached
# Target: ansiparse.mli.depends, tags: { package(angstrom), package(ppx_deriving.std), package(tyxml), extension:mli, file:ansiparse.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package angstrom -package tyxml -package ppx_deriving.std -modules ansiparse.mli > ansiparse.mli.depends # cached
# Target: ansiparse.cmi, tags: { package(angstrom), package(ppx_deriving.std), package(tyxml), byte, compile, extension:mli, file:ansiparse.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package angstrom -package tyxml -package ppx_deriving.std -o ansiparse.cmi ansiparse.mli # cached
# Target: driver/driver.cmo, tags: { package(angstrom), package(ppx_deriving.std), package(tyxml), byte, compile, extension:cmo, extension:ml, file:driver/driver.cmo, file:driver/driver.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package angstrom -package tyxml -package ppx_deriving.std -I driver -o driver/driver.cmo driver/driver.ml # cached
# Target: ansiparse.ml.depends, tags: { package(angstrom), package(ppx_deriving.std), package(tyxml), extension:ml, file:ansiparse.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package angstrom -package tyxml -package ppx_deriving.std -modules ansiparse.ml > ansiparse.ml.depends # cached
# Target: ansiparse.cmx, tags: { package(angstrom), package(ppx_deriving.std), package(tyxml), compile, extension:cmx, extension:ml, file:ansiparse.cmx, file:ansiparse.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package angstrom -package tyxml -package ppx_deriving.std -o ansiparse.cmx ansiparse.ml # cached
# Target: driver/driver.cmx, tags: { package(angstrom), package(ppx_deriving.std), package(tyxml), compile, extension:cmx, extension:ml, file:driver/driver.cmx, file:driver/driver.ml, implem, native, ocaml, quiet, traverse }
ocamlfind ocamlopt -c -package angstrom -package tyxml -package ppx_deriving.std -I driver -o driver/driver.cmx driver/driver.ml
# Target: driver/driver.native, tags: { package(angstrom), package(ppx_deriving.std), package(tyxml), dont_link_with, extension:native, file:driver/driver.native, link, native, ocaml, program, quiet, traverse }
ocamlfind ocamlopt -linkpkg -package angstrom -package tyxml -package ppx_deriving.std ansiparse.cmx driver/driver.cmx -o driver/driver.native
# Compilation successful.
